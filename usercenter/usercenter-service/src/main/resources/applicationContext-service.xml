<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
  xmlns:context="http://www.springframework.org/schema/context"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
  xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
  xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
  xmlns:cache="http://www.springframework.org/schema/cache"
  xsi:schemaLocation="
    http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd">

  <!-- 将带service层带注解的类 纳入spring容器管理 -->
  <context:component-scan base-package="cn.com.sinosoft.usercenter.service"></context:component-scan>

  <!-- 引入usercenter-dao工程中的DAO层配置 -->
  <import resource="classpath*:/applicationContext-dao.xml" />

  <!-- 对dataSource 数据源进行事务管理 -->
  <bean id="txManager"
    class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
    p:dataSource-ref="dataSourceTarget" />

  <!-- 启用事务注解 -->
  <tx:annotation-driven transaction-manager="txManager" />

  <!-- 特别说明： org.springframework.jdbc.datasource.DataSourceTransactionManager进行事务管理，不支持read-only属性的，也有人说是oracle的原因。 
    使用org.springframework.orm.hibernate3.HibernateTransactionManager支持read-only 
    ，但是还要引用一些hibernate的jar。 本工程使用mybatis做DAO层，不使用这种解决方案。 read-only事务配置暂无解决方案。 -->
  <!-- 启用声明式事务 -->
  <tx:advice id="txAdvice" transaction-manager="txManager">
    <tx:attributes>
      <!-- 对add,create,insert,update,delete 开头的方法进行事务管理,只要有异常就回滚 -->
      <tx:method name="add*" propagation="REQUIRED"
        rollback-for="java.lang.Throwable" />
      <tx:method name="create*" propagation="REQUIRED"
        rollback-for="java.lang.Throwable" />
      <tx:method name="insert*" propagation="REQUIRED"
        rollback-for="java.lang.Throwable" />
      <tx:method name="update*" propagation="REQUIRED"
        rollback-for="java.lang.Throwable" />
      <tx:method name="delete*" propagation="REQUIRED"
        rollback-for="java.lang.Throwable" />
      <!-- select,find,query,get,count开头的方法,开启只读,提高数据库访问性能 -->
      <tx:method name="select*" propagation="SUPPORTS"
        read-only="true" />
      <tx:method name="find*" propagation="SUPPORTS"
        read-only="true" />
      <tx:method name="query*" propagation="SUPPORTS"
        read-only="true" />
      <tx:method name="get*" propagation="SUPPORTS" read-only="true" />
      <tx:method name="count*" propagation="SUPPORTS"
        read-only="true" />
      <!-- 对其他方法 使用默认的事务管理 -->
      <tx:method name="*" timeout="15" />
      <!-- <tx:method name="getSeqNo" propagation="REQUIRES_NEW" /> <tx:method 
        name="*" rollback-for="Throwable" no-rollback-for="....BusinessException" 
        /> -->
    </tx:attributes>
  </tx:advice>

  <!-- 配置使Spring采用CGLIB代理 -->
  <aop:aspectj-autoproxy proxy-target-class="true" />

  <!-- 事务 aop 配置 -->
  <aop:config>
    <aop:advisor
      pointcut="execution(public * cn.com.sinosoft.usercenter.service..*Impl.*(..))"
      advice-ref="txAdvice" />
  </aop:config>

  <!-- 启用@AspectJ注解 -->
  <aop:aspectj-autoproxy />

</beans>
